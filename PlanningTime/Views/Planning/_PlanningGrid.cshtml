@model List<PlanningDay>

@functions {
    private string GetColor(PlanningTime.Models.DayType? type, bool isWeekend, bool isHoliday, bool isPast)
    {
        if (isHoliday) return "#555555";
        if (isWeekend) return "#555555";
        if (isPast && type == null) return "#e0e0e0";

        return type switch
        {
            PlanningTime.Models.DayType.Presentiel => "#4CAF50",
            PlanningTime.Models.DayType.Teletravail => "#2196F3",
            PlanningTime.Models.DayType.Conge => "#FF9800",
            PlanningTime.Models.DayType.Absence => "#9C27B0",
            PlanningTime.Models.DayType.Formation => "#00BCD4",
            PlanningTime.Models.DayType.Ferie => "#555555",
            _ => "#ffffff"
        };
    }
}

<!-- Légende des événements -->
<div class="legend mt-3 d-flex flex-wrap justify-content-center">
    <div class="legend-item d-flex align-items-center m-1">
        <span class="legend-color" style="background-color:#4CAF50;"></span>
        <span class="ms-1">Présentiel</span>
    </div>
    <div class="legend-item d-flex align-items-center m-1">
        <span class="legend-color" style="background-color:#2196F3;"></span>
        <span class="ms-1">Télétravail</span>
    </div>
    <div class="legend-item d-flex align-items-center m-1">
        <span class="legend-color" style="background-color:#FF9800;"></span>
        <span class="ms-1">Congé</span>
    </div>
    <div class="legend-item d-flex align-items-center m-1">
        <span class="legend-color" style="background-color:#9C27B0;"></span>
        <span class="ms-1">Absence</span>
    </div>
    <div class="legend-item d-flex align-items-center m-1">
        <span class="legend-color" style="background-color:#00BCD4;"></span>
        <span class="ms-1">Formation</span>
    </div>
    <div class="legend-item d-flex align-items-center m-1">
        <span class="legend-color" style="background-color:#555555;"></span>
        <span class="ms-1">Férié / Week-end</span>
    </div>
    <div class="legend-item d-flex align-items-center m-1">
        <span class="legend-color" style="background-color:#e0e0e0;"></span>
        <span class="ms-1">Jours passés</span>
    </div>
</div>

<style>
    .legend {
        font-size: 0.9rem;
        text-align: center;
    }

    .legend-item {
        display: flex;
        align-items: center;
    }

    .legend-color {
        display: inline-block;
        width: 20px;
        height: 20px;
        border-radius: 4px;
        border: 1px solid #ccc;
    }
</style>


<table class="table table-bordered text-center small-table shadow-sm" style="font-size:0.9rem;">
    <thead class="table-dark text-white">
        <tr class="align-middle" style="box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
            <th>Lundi</th>
            <th>Mardi</th>
            <th>Mercredi</th>
            <th>Jeudi</th>
            <th>Vendredi</th>
            <th>Samedi</th>
            <th>Dimanche</th>
        </tr>
    </thead>
    <tbody>
        @{
            int year = (int)ViewBag.Year;
            int month = (int)ViewBag.Month;
            int daysInMonth = DateTime.DaysInMonth(year, month);
            var firstDayOfMonth = new DateTime(year, month, 1);
            int startOffset = ((int)firstDayOfMonth.DayOfWeek + 6) % 7;
            int totalCells = daysInMonth + startOffset;
            int totalWeeks = (int)Math.Ceiling(totalCells / 7.0);
            DateTime today = DateTime.Now.Date;

            for (int week = 0; week < totalWeeks; week++)
            {
                <tr>
                    @for (int dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++)
                    {
                        int cellIndex = week * 7 + dayOfWeek;
                        int dayNumber = cellIndex - startOffset + 1;
                        DateTime date;

                        if (dayNumber < 1)
                        {
                            var prevMonth = firstDayOfMonth.AddMonths(-1);
                            int daysInPrevMonth = DateTime.DaysInMonth(prevMonth.Year, prevMonth.Month);
                            date = new DateTime(prevMonth.Year, prevMonth.Month, daysInPrevMonth + dayNumber);
                        }
                        else if (dayNumber > daysInMonth)
                        {
                            var nextMonth = firstDayOfMonth.AddMonths(1);
                            date = new DateTime(nextMonth.Year, nextMonth.Month, dayNumber - daysInMonth);
                        }
                        else
                        {
                            date = new DateTime(year, month, dayNumber);
                        }

                        var day = Model?.FirstOrDefault(d => d.Date.Date == date.Date);
                        bool isWeekend = date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday;
                        bool isHoliday = day?.IsDisabled ?? false;
                        bool isPast = date < today;
                        bool isDisabled = isPast || isWeekend || isHoliday;

                        var bgColor = GetColor(day?.Type, isWeekend, isHoliday, isPast);
                        <td style="background-color:@bgColor; vertical-align:top; height:80px; min-width:60px;">
                            <button class="dayBtn btn btn-sm w-100 h-100 text-start"
                                    style="background-color:transparent; border:none; padding:3px;"
                                    data-date="@date.ToString("yyyy-MM-dd")"
                                    data-type="@day?.Type"
                                    data-id="@day?.EventId"
                                    data-typeid="@day?.EventTypeId"
                            @(isDisabled ? "disabled" : "")>
                                <div><strong>@date.Day</strong></div>

                                @if (day?.UserEvents != null && day.UserEvents.Any())
                                {
                                    <div style="margin-top:3px;">
                                        @foreach (var ue in day.UserEvents)
                                        {
                                            <div style="background-color:@GetColor(ue.Type,false,false,false);
                                                            color:white;
                                                            font-size:0.65em;
                                                            padding:2px;
                                                            margin-bottom:1px;
                                                            border-radius:3px;
                                                            overflow:hidden;
                                                            white-space:nowrap;
                                                            text-overflow:ellipsis;">
                                                @ue.UserName
                                            </div>
                                        }
                                    </div>
                                }
                            </button>
                        </td>
                    }
                </tr>
            }
        }
    </tbody>
</table>

<style>
    .small-table th,
    .small-table td {
        font-size: 0.85rem;
        padding: 2px 4px;
    }

    .dayBtn:hover {
        background-color: rgba(0,0,0,0.05);
        cursor: pointer;
    }

    .table-dark th {
        background: linear-gradient(45deg, #343a40, #495057);
        color: #fff;
        text-shadow: 0 1px 1px rgba(0,0,0,0.2);
    }
</style>
